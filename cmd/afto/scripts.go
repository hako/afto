// Code generated by go-bindata.
// sources:
// .dpkg-gettext.pl
// .dpkg-scanpackages
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

// BinAsset represents a binary asset and its information inside a go binary.
type BinAsset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

// _DpkgGettextPl is the .dpkg-gettext.pl script as bytes.
var _DpkgGettextPl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x51\x4b\xc3\x30\x10\x80\x9f\x53\xe8\x7f\x38\x99\xb0\xf6\x41\x6b\x05\x5f\x36\x0a\x43\x2d\x43\x10\x15\xf1\x41\x90\x31\xd2\xee\xda\x05\xda\xa4\x4b\x52\x3b\x90\xfe\x77\xd3\xb4\xdd\xc6\x7c\xf0\x25\x34\x77\xdf\x7d\x97\xbb\x4e\x2e\x82\x5a\xc9\x20\x61\x3c\xa8\x50\x16\x70\xd5\xb8\x4e\xad\x10\x94\x96\x2c\xd5\xf3\xfe\xd2\x50\xc9\x19\xcf\x95\xb9\x4e\xe0\x41\x54\x0c\x37\x90\x49\x51\x82\xad\x55\x5b\x2a\xd1\x56\xdf\x05\x8f\x98\xa4\x82\x67\xc1\x12\xb5\xc6\xbd\xbe\xae\x4a\xd7\x39\x13\xba\xce\x7d\xbc\x7c\x7a\x81\x1f\xd7\x21\xf8\x4d\x0b\x98\x76\xe9\x67\x91\xd2\x02\x67\xb3\xbc\x2f\x9c\x1a\x90\xb0\x0c\xbc\xcb\x85\x6f\xc9\x1e\xdd\xd9\x4f\xa2\xea\x04\xd6\x79\x1f\x27\x44\xa2\xae\x25\x07\xb5\x65\x59\xe7\x37\x91\xf6\x40\x75\xae\x8d\x28\x29\xe3\x03\x7d\x4c\xf1\xa1\xd5\xa8\xb1\xdd\xd6\x5f\xb7\x2b\x88\x22\x08\xfd\x31\x3c\xea\x4d\xea\x66\xd5\xeb\x49\x0b\x58\x98\x37\xff\x25\xc2\x03\x71\x6c\xd6\x76\xa1\xd3\x8a\x7f\x27\x19\x1e\xe6\xd9\x89\xfc\xf9\xb9\xca\x75\xda\x71\xa9\x09\x35\xc7\xae\xf1\xe2\x7d\x25\xa4\x46\xd9\xc1\xa2\x96\xb0\x88\x3f\xdf\x5e\xdf\x3f\x22\x93\x32\xf6\x93\x25\x8c\x43\xfb\xf6\x47\x84\xe6\xfc\x0d\x00\x00\xff\xff\x00\x20\x92\xf6\x01\x02\x00\x00")

// DpkgGettextPlBytes returns a bytestring from _DpkgGettextPl.
func DpkgGettextPlBytes() ([]byte, error) {
	return bindataRead(
		_DpkgGettextPl,
		".dpkg-gettext.pl",
	)
}

// DpkgGettextPl holds data from DpkgGettextPl() and returns an BinAsset pointer.
func DpkgGettextPl() (*BinAsset, error) {
	bytes, err := DpkgGettextPlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".dpkg-gettext.pl", size: 513, mode: os.FileMode(420), modTime: time.Unix(1452433637, 0)}
	a := &BinAsset{bytes: bytes, info: info}
	return a, nil
}

// _DpkgScanpackages is the .dpkg-scanpackages script as bytes.
var _DpkgScanpackages = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x39\x6d\x73\xdb\x36\xd2\x9f\xcd\x5f\x01\xab\x74\x48\x2a\x94\x64\xa7\x4f\xe7\x99\x93\x2c\xdb\x6d\x92\xb6\x99\x69\x9b\x4e\xd2\xb4\x1f\xa2\x54\xa5\x49\x48\xe2\x99\x22\x59\x02\xb4\xeb\xb3\xd5\xdf\x7e\xbb\x0b\x80\x04\x69\x39\x97\xcc\x9d\x66\xa2\x08\xd8\xc5\xbe\xbf\x01\xfe\xe2\x70\x52\x8b\x6a\x72\x99\xe6\x93\x92\x57\x99\xe3\xd4\x82\xb3\x9b\xa8\xca\xd3\x7c\x2d\x66\xb4\x12\xb2\x4a\x63\x39\x53\xa0\x57\xaf\xa7\xd3\xef\xa3\x3c\xc9\xf8\xac\x59\x7f\x9b\xe2\xca\xd9\xde\x32\xf7\x9a\x57\x22\x2d\xf2\xf9\xe0\x64\x7c\xf2\xe5\xf8\xd9\x57\x83\x19\xfb\x82\xfd\xb2\x49\x05\xcb\xd2\x9c\xb3\x6d\x91\xa4\xab\x94\x27\xec\xf2\x96\xfd\x18\x5d\xf1\x15\x9c\xa4\x73\x49\x79\xb5\xce\xd2\xcb\x24\xad\xe6\x03\x12\x08\x16\x13\xdc\xfc\x14\x02\x8e\xef\x1e\x07\x6c\xce\xdc\x63\x36\xff\x9b\x6d\xa7\xe3\xe1\xc4\x1f\x3f\x0d\xa6\x20\x53\x59\x8b\x8d\x7f\xf1\xea\xa7\xe7\xa1\xc5\x22\x98\x39\x15\xff\xb3\x4e\x2b\xce\xbc\x31\x6e\x8f\xd6\x5c\x4a\xfe\x97\x1c\x97\x99\x37\x73\xf0\x57\x52\x6c\xa3\x34\xf7\x07\x04\x4d\xf8\xf5\x20\x50\x0a\x1e\x5d\x6d\xa3\x72\xce\xfc\xa2\x94\xa0\x66\x94\x31\xf3\x99\x9f\x31\x4f\xd4\xeb\x35\x17\x52\x78\xa1\x73\x00\x5b\x15\x8f\x8b\xed\x96\xe7\x09\x88\xdb\xe0\x34\x9b\x06\x2b\xce\x22\x21\x98\xf5\x41\xac\xb2\x4a\x8b\x2a\x95\xb7\x1a\xa7\x8c\xe2\xab\x68\xcd\x97\x15\xbf\x4e\xd1\xbc\x9a\x92\x5a\x28\x1c\x2d\xdf\x05\x18\x27\x4b\xe0\x38\xc8\xe8\xfd\xac\x8e\x69\x22\xf8\xf1\xde\x16\x75\x15\x77\x76\x7e\x55\x1e\xb3\xb7\x7e\xee\x72\x57\x07\x79\x2c\x7b\x68\x2f\x85\xe0\xb9\x4c\xa3\xcc\xde\xfc\x11\xcc\x26\xe1\x1f\xaf\xba\x14\xf9\xe8\x05\x2f\x2d\xb5\x69\x7b\xcf\xd6\x9b\xbe\x7d\x14\xf7\xae\x65\x69\xef\x79\x91\xaf\x32\x08\x4c\xd1\x65\x54\x5c\xa7\x09\xef\x91\x2c\xb3\x28\xee\xee\xbd\xcc\x37\x51\xde\xdb\xfb\xba\x8a\x37\xa9\x04\x3d\xeb\xaa\x63\x21\x0c\xef\x3c\xda\x76\xed\x98\xfe\xab\xb3\x7e\x95\x0b\x19\x65\x19\x4f\x46\x7d\xc8\x8f\x2f\xbe\x12\xf5\xb6\xab\xb5\x88\xab\xb4\xec\x9b\xf3\x75\x95\xae\xd3\xce\xce\x37\xf5\x1a\x05\x64\xdd\x8f\xf7\x93\x92\xa5\xbf\xfd\x75\x2d\x37\x45\xb5\x07\xf0\x7d\xb1\xe5\xa5\x8a\x83\x3e\xe8\x37\x7e\x29\x40\xe5\x3d\x10\x70\x4d\x6a\x3c\xde\x87\xbd\x8a\x61\xdb\x88\x89\x81\xa7\x33\x14\x52\x43\x30\xb9\xe1\x8c\x82\x50\x30\x88\x84\x82\xd6\x65\x55\x40\x71\x61\x71\x24\x28\xdb\x8f\x08\xbe\xc4\xe5\xcc\xb9\x68\x17\x77\x40\xe0\x2e\x8b\x7d\x77\x19\xec\xda\x48\xde\x41\x66\x37\x0b\x5d\x85\xbe\xe3\x12\x32\x70\x3a\xfd\xa1\xc8\xd7\xec\xcf\x1b\x7f\x0a\x12\xad\xd2\x35\xbb\xac\xa1\x32\x41\xe5\x32\xd9\xaa\xd2\x54\x00\x05\x7f\xc3\xb3\xd2\xd6\x02\x52\x48\xd4\x97\xec\x8e\x3d\xa9\x05\x18\x67\xc6\xf8\x5f\xa9\x64\xc7\x33\xb6\x6b\x3d\xa0\xab\x99\x7d\x66\xf1\x44\x6f\xb6\x58\x75\xc2\x2f\x7b\x94\x8f\x5b\x68\x04\x51\xd5\x83\x82\x90\x7c\xd5\x62\x6c\xeb\x4c\xa6\x16\xab\xce\x79\xad\x89\x5b\x71\x01\x68\xa0\x08\xa8\xfe\x5a\x69\xe5\x2f\x8c\x7e\xa1\x87\xda\xdd\x6f\xee\xcf\xbd\xd0\xbb\x36\x09\xed\xa1\x60\xf7\xf5\x21\xfc\x42\x21\xee\xa3\x39\x44\x93\x67\x73\xbb\xdf\x1e\x7a\xc8\x00\x0d\x61\x04\xb8\x23\x77\x83\xa9\x73\xb9\x62\xcb\xb5\x3f\x78\xc1\x2f\xd3\x28\x67\x47\xa2\x41\x39\x12\xe3\x45\x3e\x08\x42\x28\xb8\x61\x53\xf2\x67\x74\x0e\x8d\x38\x73\x76\x8a\x24\x19\xf6\x01\x41\x67\xf0\x0e\xf7\xa7\x48\xf1\xfd\xa9\xd2\xe0\x8c\x8d\xc7\xe3\x0f\xec\x14\xda\x50\x54\xdd\x96\x91\xdc\x9c\xb1\xd3\x02\x28\x57\x90\xcc\x58\xe3\xcf\x00\x15\xb7\xcb\x0a\x96\x7f\x9d\x7d\x60\x67\x4c\x57\x37\xe1\x38\xda\x1e\x53\x60\x34\xaa\x43\x36\x1a\xf5\x3d\x02\x1f\x11\x83\x0e\xab\xa2\x22\x6f\x89\x31\xa2\x46\x88\x4a\xee\x39\xc5\xef\x33\x66\x79\xcc\xd4\x01\x06\x11\x6c\x8e\xd2\xa1\x2d\x1e\xea\x7b\x0c\x0f\x65\x59\x71\xa3\x5c\x59\x66\xdc\x98\x4a\xb0\x62\xc5\x22\x26\x20\x24\x61\x53\x97\x71\xa2\xb3\x41\x3a\xfd\x98\x44\x39\x37\x40\x46\x62\x36\x11\x70\xcb\x85\xd0\x47\xf0\x33\x1a\xf5\x43\xb2\x3d\xd2\x30\x1d\x3b\xca\x37\xe4\x07\x15\xdd\x0c\x3a\xb6\x0a\xf0\x13\x96\xae\x58\x5e\xc8\x26\xa2\x10\xe2\x5f\x7c\xfd\xe6\xbb\x5f\xd9\x29\x7b\x66\xc2\x8d\x2c\x08\x1d\x55\x07\xd8\x1d\xae\x77\x33\x02\x91\xc5\x2c\x10\xae\x77\xfa\x18\x74\xce\x07\xa7\xd8\x39\xa3\x48\xf4\xd8\x94\x79\xf8\xff\x4c\x37\xaa\x3c\x59\x46\x15\x0e\x19\x20\x91\xdf\x25\x17\xe8\xa8\xb1\xd0\x30\x87\x3d\x1f\x02\x78\xa4\x6a\xf1\x60\xb8\x04\x9b\x8f\x91\xe5\x00\x36\x8b\x0e\xc4\x55\x64\x0c\x34\xf0\xc2\x00\xad\xc1\x33\xc1\x1f\xa1\xdc\x9c\x55\x67\x08\x1d\x87\x07\x0b\x2f\x64\xde\x68\x55\xa0\x9f\x95\x0a\xbe\xab\xc2\x15\x26\x0a\x30\xb7\x89\x56\xf8\xd9\x06\x2a\x4e\x25\x64\xdb\x99\x33\x4a\x58\x8b\xcf\x20\x10\x93\x14\x46\x2b\x95\x16\x3e\xe6\xd9\x37\x04\x64\x08\x85\xcc\x40\x17\xad\x0a\xa8\x14\xe0\xcb\x7e\x01\xee\x7e\x5a\xaa\xc1\x78\x00\x79\x09\xac\x78\x2b\xce\x3e\x4e\xaf\x0d\x0c\x33\xeb\xb3\x98\x35\x64\x0d\x2b\xc7\x52\x16\x74\xf5\x3c\x13\x5e\x98\xb6\x39\x0c\x3e\x16\x1c\xb0\x61\xfa\x60\x47\x40\x22\x8e\xe2\x0d\xd4\x7e\x5d\x77\xe2\x6d\x69\xbc\x42\x66\x8d\x42\xf7\x32\x98\x5f\x2c\x55\x49\x81\x39\x0a\x32\x31\xa7\x42\x43\xe7\xee\xdc\x68\x77\xe7\x42\x60\x01\x2b\x88\x69\x18\x0b\x1e\xc2\xf4\x51\x71\x2b\x24\xdf\xfa\x1e\x8e\x71\x18\x20\x23\x18\x2e\xca\x08\x86\x11\x93\x9f\x5e\x08\xdc\xbc\x0c\x3c\x0f\x2c\xf5\xa1\x07\xc4\xe6\xee\x79\x4f\x94\x73\xca\x2d\xec\x30\x3a\xa7\x85\xca\x0d\x8a\x15\xcc\x8e\x9c\xdf\x74\x46\x65\xe8\x7f\xb9\xaf\xc1\x20\xc7\x3d\x08\x83\x0b\x08\xb8\xd6\x7d\x93\x41\x68\x05\x9b\x37\x22\x8f\x79\x81\xe2\xbc\xc7\x8d\xcf\x8b\x3a\x4b\x72\x4f\x32\x24\x8e\x6e\xc4\xf2\x56\xf1\x28\x81\x6a\x83\xd5\xf5\x31\x67\x76\xc2\xf6\xd0\x78\xf2\xdb\x57\x3f\xbc\x9c\x12\xfe\xcd\x06\xc3\xc2\x3f\xd5\xe2\x9e\x61\x32\x1e\xc4\x1b\xb0\xdc\xcc\x39\x20\x2d\x73\x4c\xf2\xa5\x5e\x41\xeb\x95\x55\x91\xc1\xd6\x1f\x7a\x5a\xbe\x64\xa3\x57\x84\xa5\x41\x7f\x00\x26\xe5\xb8\x41\xe5\x7f\xb2\xc1\x80\xc8\x12\x3f\xb8\x6d\xec\x57\x2c\x86\x0c\x67\x0d\x51\xea\x3c\xa8\x58\xc8\xc4\x55\x5a\x96\xa0\xa6\x29\xa9\x54\xf0\x56\xb9\xad\x0f\x91\xce\x21\x97\xe1\xe7\x4e\xf3\x3f\x7f\x9c\xe7\xa2\x23\x3c\x18\x53\xcb\xea\x51\xd9\x84\x40\xbe\x49\xe5\x86\x1d\x25\x1f\xe3\x7d\xfe\x08\x6f\xb2\xd3\x91\xbc\xc6\x42\x13\x68\xab\x41\x58\x96\x68\x45\xcd\x06\x76\xb5\xd9\x35\xe4\x6f\x26\x26\xbf\x2f\xf2\xa1\xbf\x78\x0b\x37\x99\xf7\x6c\x21\x3f\x0c\xfd\x31\x2c\x73\xfa\x3d\x1e\x06\xc3\x60\x91\x4f\x26\x8d\x46\x94\x39\x57\xfc\x36\x74\xaf\xa3\xac\xe6\x01\xf0\xca\x62\xe6\x9e\x84\x2e\x16\x75\x42\x41\x1b\xe8\xbc\x04\x54\x1c\xb6\xf0\xc0\x2e\x00\x1a\x0c\x7f\x81\x38\xed\x2e\x0c\x42\x7b\x4e\x59\xc3\xda\x83\xb3\x7d\x58\x43\x41\x49\xa4\x74\x5a\x88\xa7\xee\x64\xa2\x05\x72\xe5\xb5\x42\x9d\x6b\x1c\x65\xaf\xc6\x04\x64\x01\x77\xa2\x90\xf7\x64\xc0\xbb\x1c\x26\x4b\x98\xe2\x05\xf8\x07\x6f\x6d\x6c\x55\x15\x5b\xcb\x79\x54\xe0\x66\x30\x87\xae\x8a\xe9\x22\x87\xfd\x09\x00\xf5\xe8\x42\x1e\xd3\x78\xa1\xf2\x07\xda\xc9\x39\x68\x74\x05\xe1\x9a\x2b\xd4\x2e\x78\x54\x88\x9f\x0a\x33\x8a\xa8\xb9\x17\xd8\x75\xf8\xe3\x08\x40\xc9\x88\x3c\x9b\x08\xc1\x18\x80\x8b\x64\x97\xc9\x0c\xca\x66\xc6\x25\xef\x6f\xa3\x58\x1d\x37\x98\xaa\x73\xe7\x96\xd0\x2b\xb1\x85\x53\x4b\x37\x3d\xd4\x9e\x4f\x76\x4d\x84\x40\x79\xe0\x50\xd6\xa0\xdb\xdf\x75\x08\x28\x0c\x62\xf0\x44\x55\x63\xa5\xbb\xb9\x19\xee\x40\xf2\xe5\xe8\xcc\xda\x08\xd4\x09\x24\xaa\x0d\xf1\xf6\x97\x17\x2f\xdf\xbc\xa1\xf1\xee\x00\x01\x03\x76\xd8\x58\x05\xec\xee\xaf\xf4\x1d\x0a\x16\x01\x83\xe1\xa6\x82\x9b\x5f\x24\x61\x5e\x97\x58\x2a\xe1\x6e\x60\xa6\x48\xb0\xce\xd8\x90\x80\xd1\x9a\x3c\xbb\x01\xcc\x22\x57\x43\x4c\xba\xce\x41\x8d\x84\x25\x91\x8c\x1a\x77\x1f\x6a\x9f\x96\xc6\xaf\x28\xae\xb9\xb6\xa1\xeb\x0e\x0e\xee\xef\xc9\x71\xee\xe1\x4c\x0b\xde\x31\x01\x64\xe2\xfb\x0f\x08\xd9\x31\x3d\x23\xfc\x0f\xb4\xeb\xe9\x62\x24\xef\xa8\x53\xe3\x68\xf8\xd9\xca\xe8\x28\x6c\x95\xc1\x5a\xc3\xb0\x82\x93\x0e\xca\xdd\x3b\xca\xa5\x07\x1a\x7c\x54\xf6\x4d\x24\x98\x61\xa5\xa2\xb9\x2b\x4d\xc0\x1a\x3b\x36\xc5\xa1\x93\x2f\xcd\x5d\x79\xa7\x92\xa9\xb7\x39\x67\x03\x6b\x20\x00\x82\x03\xc2\xa2\xee\xf8\x3c\x1c\x6c\x13\xbc\x2b\xb3\x53\xec\x1d\xf7\x83\x86\xd9\x00\xd7\xee\x21\xe2\x42\x1b\x82\xe8\x5c\xce\x4f\x9f\x9f\x05\x33\x16\x67\x85\xe0\xfe\x73\xf8\xe5\x9e\x93\x39\xfb\xb9\xb9\xf8\xc3\x90\x04\xf5\xfa\xa5\x7c\x5f\xe1\x9e\xfc\xee\xbf\x3f\x1e\xfd\x23\x1a\xad\x3e\xdc\x7d\xf9\x6c\x17\x2c\xc4\x70\x74\x0e\x5f\xee\x64\x5f\xea\xbf\x95\x55\x94\x83\x1d\xdb\xda\xd3\x65\x38\x85\x35\xfc\xd7\x32\x5a\x36\x8c\xc8\x30\xfa\x6d\x00\xcb\xdf\xc9\x4c\xf7\x89\x0b\x21\x23\x39\x67\xf8\xed\x93\xc5\x3f\xd6\xf9\x11\x4b\x37\xc5\x7d\x2d\xd0\x45\xf8\xfb\xff\xff\xb0\x8f\x06\xf8\x1e\x22\x15\xaa\x9e\xbc\xed\xd7\x26\x92\x8d\xde\x31\x50\x32\x4d\xa3\x5f\x84\xa8\x46\xbd\xd1\x6f\x50\x3b\xb2\x3e\x78\x79\x2d\x37\x7e\x07\x10\x34\xe5\x07\xb7\x75\x05\xd9\x8d\x61\x54\x1c\x79\xe3\x0e\xa6\xee\x09\x56\x05\xb4\x41\xd4\x46\xd5\x40\xde\xab\x5e\x21\xbb\x83\xde\xaa\x27\xbe\x9d\xa3\x62\x42\xcf\x2e\x74\xb9\x05\x82\xb1\xd4\x19\x80\xa1\x32\x87\x6c\x3f\x39\x3e\x86\xab\x7e\x0b\x7a\xfd\xee\x17\x73\x11\xbe\xa9\x20\x48\x32\x18\x2b\xf5\x4c\x4a\xdd\x3a\x95\x19\x07\xa7\x6c\xd2\x95\xf4\x2f\x96\x7a\x52\xd4\xd3\x60\x9d\x67\xd0\x82\x18\xce\xab\xed\x55\xd7\x64\xdc\x40\x1f\xc6\x34\x62\x56\x11\x32\x94\x8d\x2a\x73\xf6\xcf\x22\xcd\x7d\x8f\x79\xa1\x28\x2a\xc9\x88\x89\x03\x25\x7b\x0b\x1e\xd6\xb4\xe6\x70\xea\xf7\xd3\xff\xfe\xe3\x34\x5c\x9d\xb1\x3d\xf1\x19\xff\x19\x28\x35\x77\x32\x87\xb1\x9e\xa5\x01\x98\xfa\xa1\xb2\x7d\x2d\xd5\x90\xec\x5f\x08\xc8\x7e\x7c\x50\x95\xe1\x45\xbc\xc1\x94\x49\x68\x85\x2a\xaa\x77\x1a\x75\xad\x48\x78\xae\xe6\x68\x73\xcd\x58\xae\xec\x61\x1a\xeb\x88\x75\xd1\xf2\x2a\xcf\xf9\xa4\xd1\xb8\xe8\xdd\x77\x9a\x74\xb1\xee\x6c\x4d\xd2\x34\xd3\xaf\x25\xc3\x99\xb9\x8f\xc2\xfc\xf2\xc5\x78\x88\xf3\x8b\x5e\xe9\x69\xa6\xa9\xc1\x3a\x16\xdc\x65\xe3\x61\x30\x67\xe8\x9a\xf7\xdc\xd0\x15\xea\x1d\x35\x74\xb7\xcd\x43\x29\x8c\x6a\xa2\xcc\x52\xe9\x23\xb9\x49\xe8\x2e\xc3\xff\x0b\x1e\x92\xdc\xdf\xfb\x15\x1e\x0e\xfe\x56\x30\x3d\xd2\xe1\x69\x92\xb3\xf9\x9a\xcc\x64\x7d\x08\x3d\xa3\xe3\x1b\xfa\x39\x16\xc0\xf9\xe2\x0c\xbe\xf1\x45\x7d\xd2\xf4\x7d\x72\x52\xa6\xbc\xa8\xab\x97\xd9\x06\x6f\x99\xed\x67\xd6\x36\x4c\xd6\x66\xdb\xc8\x76\xd7\x3e\x16\xef\x34\x26\x0a\x72\xb8\x86\xfe\xe9\x37\x07\xf0\xb6\x00\x36\xd1\x36\xda\x4e\x41\x96\x09\x58\x6a\x38\x0d\x5b\x11\x02\x3d\x91\x1c\xa8\xf7\x7e\x3b\xc6\x42\xd5\x81\x19\x35\x61\xb7\x64\xbe\x31\x92\x88\x6e\xc5\x7e\x59\x42\x3d\x4d\x19\xe2\x18\xd5\x5a\x3e\x6b\x3e\x38\xd8\x7b\x76\xde\x1a\xc0\x1c\x69\x1e\xfa\xe8\x30\x99\x7a\xdf\x49\xd2\xb3\xe7\x1d\x7a\xfc\x27\x95\xda\x0c\xd2\x6a\xd8\xa8\x5a\x40\x9b\x4d\x33\xc3\xec\x19\x00\x86\xec\x5d\x0e\x13\x6a\x92\xea\xbf\x61\x58\x8e\x6f\x53\xa5\xa0\x67\x88\xe1\x40\xe5\x05\x4e\x00\x9d\xcc\x26\xda\x8f\x59\xa0\x25\x68\x49\x85\xbf\xf0\xab\x3d\x64\xfe\xce\x80\x47\x4c\x86\xcc\x3a\x18\xfa\xaf\x0e\xd4\x86\xd4\x4f\x53\xe6\xa9\xa3\xb4\x65\x43\x0f\x71\x27\x58\x72\x74\x07\xb0\xf2\xd7\xfc\x71\x64\x9b\x0a\x9c\xb7\x10\x32\xf7\xdb\x97\xd5\xb8\xa8\x12\xb1\xc4\x42\x27\x39\x5e\x6d\x8f\x67\x4e\x93\x51\xcc\xa7\x72\x0c\x97\x14\xd1\x5e\xf6\x4d\x39\x40\x5f\x5a\x8f\x1d\x7e\x4f\xa0\xa0\x79\xc6\x6a\xdc\x68\x49\x00\x55\x21\xb0\xb5\xf9\xc4\x24\x6e\x45\x86\x61\x4a\x0f\x72\x53\x38\xa5\x2f\x9e\x86\x0a\x08\x0c\x14\xcc\xb3\xb9\x95\xea\x7b\x6a\x8a\x65\x70\x75\x71\x33\xb8\x9a\x11\x1b\xe3\xdc\x06\x90\x69\x1f\x53\x33\x25\xb7\x5a\xb8\x7a\xbb\x6f\xda\xa7\x4f\x71\xb7\xe9\x18\xd0\x73\x0d\xca\xde\x29\xe7\xdb\x08\x2a\x31\x4c\x6b\x1b\x70\x0a\x52\xc0\x49\x59\xc8\xa4\xa8\x65\x53\xc0\x9b\xaa\xad\xcc\x68\x7c\xaf\x1b\xfa\x47\x3b\x03\x61\x3e\x4a\x8f\xc2\x45\x94\x35\x44\x65\x2d\x28\x5e\x18\x55\xa5\xc3\x3d\x65\x78\xb9\x0b\x42\x2b\x48\xda\x18\xc0\x08\x7b\xd2\x8c\x13\xc4\x7e\x38\x6c\xde\xad\xf1\x9e\x48\x4f\xcd\xd7\x9c\xee\x41\x3a\x34\xd4\x1c\xd9\x69\x59\x53\x36\x1c\xf6\x1e\x73\xec\x40\x0a\xd4\x0b\x6a\xb7\xb3\xda\xcf\xee\x3a\xf9\xad\xf3\x54\x06\x9e\x3e\xed\xc8\xd2\xed\x92\x34\x23\xa7\x50\x26\x2a\xf0\x10\xf4\x51\xb8\xd7\x5a\x65\x82\x2e\xeb\x53\xa0\x60\xca\x83\x45\xbb\x57\x7d\x5b\xc0\x9e\xe9\x80\xe4\x6e\x4a\xdb\xa7\x08\x3d\x1a\xb5\x42\x8b\x92\xc7\xe9\xea\x96\xe2\x02\x2f\x2c\x96\x80\x70\x8f\xe9\x99\x70\x34\xda\x27\x6b\x5b\x56\x3f\x45\x50\x2b\x1e\x3e\x57\xd6\x07\x06\xa6\xab\x2f\xd4\x8e\x36\x0a\x1e\x95\xd1\x62\xfb\x1f\xc4\x74\xf6\x54\xfb\xdf\xaa\x42\xd2\x55\x8f\xe7\xb2\x4a\x41\x14\x59\x30\x88\xf9\x12\xf8\x37\xd2\xa1\x44\xe3\xb6\xd4\xf7\xf2\xb6\xc3\xe4\xdf\x01\x00\x00\xff\xff\x04\xc3\xb6\x24\x31\x20\x00\x00")

// DpkgScanpackagesBytes returns a bytestring from _DpkgScanpackages.
func DpkgScanpackagesBytes() ([]byte, error) {
	return bindataRead(
		_DpkgScanpackages,
		".dpkg-scanpackages",
	)
}

// DpkgScanpackages holds data from DpkgScanpackagesBytes() and returns an BinAsset pointer.
func DpkgScanpackages() (*BinAsset, error) {
	bytes, err := DpkgScanpackagesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".dpkg-scanpackages", size: 8241, mode: os.FileMode(493), modTime: time.Unix(1452605519, 0)}
	a := &BinAsset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*BinAsset, error){
	".dpkg-gettext.pl":   DpkgGettextPl,
	".dpkg-scanpackages": DpkgScanpackages,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*BinAsset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".dpkg-gettext.pl":   &bintree{DpkgGettextPl, map[string]*bintree{}},
	".dpkg-scanpackages": &bintree{DpkgScanpackages, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
